% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities.R
\name{get_metno_gridcells_nn}
\alias{get_metno_gridcells_nn}
\title{Function for matching coordinates to the grid used in the met Nordic data}
\usage{
get_metno_gridcells_nn(coords, max_dist = 1.5)
}
\arguments{
\item{coords}{A data table with columns \code{'lon'}, \code{'lat'}}

\item{max_dist}{A maximum distance (in km) to be away from the center of the met-no gridpoint. In theory, the grid is 1km x 1km, so no location within the covered area
should be more than 1/sqrt(2) = 0.7 km from its grid center. But since distance calculation is approximate, we put the default to 1.5 for some tolerance. This has been loosely verified
to be a good distance by plotting, so only change this if you know what you're doing.}
}
\value{
A data table with columns \code{'lon'}, \code{'lat'} (same as in \code{coords}), \code{'lon_metno'}, \code{'lat_metno'} (center coordinates of corresponding met Nordic gridcell),
\code{'x_ind'}, \code{'y_ind'}, \code{'vector_ind'} (indices of the gridcell within the metno netcdfs).
}
\description{
This function takes a set of coordinates and finds the corresponding met-Nordic gridcells.
For this we use approximate nearest neighbor using fast kd-tree search. This search only works with Euclidean distance,
which introduces error because the x-y coordinates in metno are only given in lon/lat (and d lon is not the same as d lat, especially off the equator).
This is counteracted by transforming longitudes to cos(lat) * lon (both for the given coords and the netcdf coordinates), which gives a first order correction
and should be pretty close to exact. Everything is back-transformed at the end.
The function returns a data table providing the original coordinates and the coordinates of the met Nordic grid cell, as well
as the indices (both vector indices and x- and y-indices) of the met Nordic grid cell in the met Nordic netcdfs
}
\examples{
# met gridcell for Oslo city hall:
get_metno_gridcells_nn(data.table(lat = 59.912,lon = 10.733))

}
